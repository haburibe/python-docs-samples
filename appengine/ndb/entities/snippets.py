# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from google.appengine.ext import ndb


class Account(ndb.Model):
    username = ndb.StringProperty()
    userid = ndb.IntegerProperty()
    email = ndb.StringProperty()


def create_sandy_with_keywords():
    sandy = Account(username='Sandy',
                    userid=123,
                    email='sandy@gmail.com')
    return sandy


def create_sandy_manually():
    sandy = Account()
    sandy.username = 'Sandy'
    sandy.userid = 123
    sandy.email = 'sandy@gmail.com'
    return sandy


def create_with_type_error_in_constructor():
    bad = Account(username='Sandy',
                  userid='not integer')  # raises an exception
    return bad


def assign_with_type_error(sandy):
    sandy.username = 42  # raises an exception


def store_sandy(sandy):
    sandy_key = sandy.put()
    return sandy_key


def url_safe_sandy_key(sandy_key):
    url_string = sandy_key.urlsafe()
    return url_string


def get_sandy_from_urlsafe(url_string):
    sandy_key = ndb.Key(urlsafe=url_string)
    sandy = sandy_key.get()
    return sandy


def id_from_urlsafe(url_string):
    key = ndb.Key(urlsafe=url_string)
    kind_string = key.kind()
    ident = key.id()
    return key, ident, kind_string


def update_key(key):
    sandy = key.get()
    sandy.email = 'sandy@gmail.co.uk'
    sandy.put()


def delete_sandy(sandy):
    sandy.key.delete()


def create_sandy_named_key():
    account = Account(username='Sandy', userid=1234, email='some@where.com',
                      id='SOME@WHERE.COM')

    return account.key.id()  # returns 'SOME@WHERE.COM'


def set_key_directly(account):
    account.key = ndb.Key('Account', 'SOME@WHERE.COM')

    # You can also use the model class object itself, rather than its name,
    # to specify the entity's kind:
    account.key = ndb.Key(Account, 'SOME@WHERE.COM')


def create_sandy_with_generated_numeric_id():
    # note: no id kwarg
    account = Account(username='Sandy', userid=1234, email='some@where.com')
    account.put()
    # Account.key will now have a key of the form: ndb.Key(Account, 71321839)
    # where the value 71321839 was generated by Datastore for us.
    return account


class Revision(ndb.Model):
    message_text = ndb.StringProperty()


def example_message_revisions():
    ndb.Key('Account', 'sandy@foo.com', 'Message', 123, 'Revision', '1')
    ndb.Key('Account', 'sandy@foo.com', 'Message', 123, 'Revision', '2')
    ndb.Key('Account', 'larry@foo.com', 'Message', 456, 'Revision', '1')
    ndb.Key('Account', 'larry@foo.com', 'Message', 789, 'Revision', '2')


def example_revision_equivalents():
    ndb.Key('Account', 'sandy@foo.com', 'Message', 123, 'Revision', '1')

    ndb.Key('Revision', '1', parent=ndb.Key(
        'Account', 'sandy@foo.com', 'Message', 123))

    ndb.Key('Revision', '1', parent=ndb.Key(
        'Message', 123, parent=ndb.Key('Account', 'sandy@foo.com')))

    sandy_key = ndb.Key(Account, 'sandy@foo.com')
    return sandy_key


def insert_message():
    account_key = ndb.Key(Account, 'some@where.com')

    # Lets ask Datastore to allocate an ID.
    new_id = ndb.Model.allocate_ids(size=1, parent=account_key)[0]

    # Datastore returns us an integer ID that we can use to create the message
    # key
    message_key = ndb.Key('Message', new_id, parent=account_key)

    # Now we can put the message into Datastore
    initial_revision = Revision(
        message_text='Hello', id='1', parent=message_key)
    initial_revision.put()

    return initial_revision


def get_parent_key(initial_revision):
    message_key = initial_revision.key.parent()
    return message_key


def multi_key_ops(list_of_entities):
    list_of_keys = ndb.put_multi(list_of_entities)
    list_of_entities = ndb.get_multi(list_of_keys)
    ndb.delete_multi(list_of_keys)


class Mine(ndb.Expando):
    pass


def create_expando():
    e = Mine()
    e.foo = 1
    e.bar = 'blah'
    e.tags = ['exp', 'and', 'oh']
    e.put()

    return e


def expando_properties(e):
    return e._properties
    # {'foo': GenericProperty('foo'), 'bar': GenericProperty('bar'),
    #  'tags': GenericProperty('tags', repeated=True)}


class FlexEmployee(ndb.Expando):
    name = ndb.StringProperty()
    age = ndb.IntegerProperty()


def create_flex_employee():
    emp = FlexEmployee(name='Sandy', location='SF')
    return emp


class Specialized(ndb.Expando):
    _default_indexed = False


def create_specialized():
    e = Specialized(foo='a', bar=['b'])
    return e._properties
    # {'foo': GenericProperty('foo', indexed=False),
    #  'bar': GenericProperty('bar', indexed=False, repeated=True)}


def non_working_flex_query():
    FlexEmployee.query(FlexEmployee.location == 'SF')


def working_flex_employee():
    FlexEmployee.query(ndb.GenericProperty('location') == 'SF')


notification = None


def notify(message):
    global notification
    notification = message


class Friend(ndb.Model):
    name = ndb.StringProperty()

    def _pre_put_hook(self):
        notify('Gee wiz I have a new friend!')

    @classmethod
    def _post_delete_hook(cls, key, future):
        notify('I suck and nobody likes me.')


def demonstrate_hook():
    f = Friend()
    f.name = 'Carole King'
    f.put()  # _pre_put_hook is called
    yield f
    fut = f.key.delete_async()  # _post_delete_hook not yet called
    fut.get_result()  # _post_delete_hook is called
    yield f


class MyModel(ndb.Model):
    pass


def reserve_ids():
    first, last = MyModel.allocate_ids(100)
    return first, last


def reserve_ids_with_parent(p):
    first, last = MyModel.allocate_ids(100, parent=p)
    return first, last


def construct_keys(first, last):
    keys = [ndb.Key(MyModel, id) for id in range(first, last+1)]
    return keys


def reserve_ids_up_to(N):
    first, last = MyModel.allocate_ids(max=N)
    return first, last
